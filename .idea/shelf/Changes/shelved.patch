Index: project-root/backend/src/utils/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nfrom flask import Flask, request, jsonify, send_from_directory\r\nfrom flask_cors import CORS\r\nfrom werkzeug.utils import secure_filename\r\nfrom pymongo import MongoClient\r\nfrom bson import ObjectId\r\nimport bcrypt\r\nimport datetime\r\n\r\napp = Flask(__name__)\r\nCORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:3000\"}})\r\n\r\nUPLOAD_FOLDER = 'uploads/'\r\nALLOWED_EXTENSIONS = {'docx', 'pptx', 'pdf', 'txt', 'py', 'js', 'html', 'css'}\r\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\r\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024\r\n\r\n# CHANGE HERE CREDENTIALS\r\nclient = MongoClient(\"mongodb://admin:admin@localhost:27017/\")\r\ndb = client[\"Moodle-Bodio\"]\r\nusers = db[\"users\"]\r\ncourses = db[\"courses\"]\r\nsections = db[\"sections\"]\r\n\r\nif not os.path.exists(UPLOAD_FOLDER):\r\n    os.makedirs(UPLOAD_FOLDER)\r\n\r\ndef allowed_file(filename):\r\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\r\n\r\n@app.route('/uploads/<filename>')\r\ndef uploaded_file(filename):\r\n    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\r\n\r\n@app.route('/register', methods=['POST'])\r\ndef register_user():\r\n    data = request.json\r\n\r\n    if users.find_one({\"email\": data[\"email\"]}):\r\n        return jsonify({\"error\": \"Email already registered\"}), 400\r\n\r\n    password_hash = bcrypt.hashpw(data[\"password\"].encode('utf-8'), bcrypt.gensalt())\r\n\r\n    new_user = {\r\n        \"name\": data[\"name\"],\r\n        \"surname\": data[\"surname\"],\r\n        \"sex\": data.get(\"sex\", \"\"),\r\n        \"birth\": datetime.datetime.strptime(data[\"birth\"], \"%Y-%m-%d\") if \"birth\" in data else None,\r\n        \"email\": data[\"email\"],\r\n        \"password_hash\": password_hash.decode('utf-8'),\r\n        \"role\": data[\"role\"],\r\n        \"courses\": []\r\n    }\r\n\r\n    user_id = users.insert_one(new_user).inserted_id\r\n    return jsonify({\"message\": \"User registered successfully\", \"user_id\": str(user_id)}), 201\r\n\r\n@app.route('/login', methods=['POST'])\r\ndef login():\r\n    data = request.json\r\n    user = users.find_one({\"email\": data[\"email\"]})\r\n\r\n    if not user:\r\n        return jsonify({\"error\": \"User not found\"}), 404\r\n\r\n    if bcrypt.checkpw(data[\"password\"].encode('utf-8'), user[\"password_hash\"].encode('utf-8')):\r\n        return jsonify({\r\n            \"message\": \"Login successful\",\r\n            \"user_id\": str(user[\"_id\"]),\r\n            \"name\": user[\"name\"],\r\n            \"role\": user[\"role\"]\r\n        }), 200\r\n    else:\r\n        return jsonify({\"error\": \"Invalid password\"}), 401\r\n\r\n@app.route('/add_course', methods=['POST'])\r\ndef add_course():\r\n    data = request.json\r\n\r\n    teacher = users.find_one({\"_id\": ObjectId(data[\"teacher_id\"]), \"role\": \"teacher\"})\r\n    if not teacher:\r\n        return jsonify({\"error\": \"Teacher not found\"}), 404\r\n\r\n    new_course = {\r\n        \"name\": data[\"name\"],\r\n        \"description\": data[\"description\"],\r\n        \"teacher\": ObjectId(data[\"teacher_id\"]),\r\n        \"sections\": [],\r\n        \"students\": [],\r\n        \"color\": data.get(\"color\", \"rgba(0, 0, 0, 0.05)\")\r\n    }\r\n\r\n    course_id = courses.insert_one(new_course).inserted_id\r\n\r\n    users.update_one(\r\n        {\"_id\": ObjectId(data[\"teacher_id\"])},\r\n        {\"$push\": {\"courses\": course_id}}\r\n    )\r\n\r\n    return jsonify({\"message\": \"Course added successfully\", \"course_id\": str(course_id)}), 201\r\n\r\n@app.route('/add_section', methods=['POST'])\r\ndef add_section():\r\n    data = request.json\r\n    course_id = data[\"course_id\"]\r\n\r\n    course = courses.find_one({\"_id\": ObjectId(course_id)})\r\n    if not course:\r\n        return jsonify({\"error\": \"Course not found\"}), 404\r\n\r\n    new_section = {\r\n        \"name\": data[\"name\"],\r\n        \"data\": []\r\n    }\r\n\r\n    section_id = sections.insert_one(new_section).inserted_id\r\n\r\n    courses.update_one(\r\n        {\"_id\": ObjectId(course_id)},\r\n        {\"$push\": {\"sections\": section_id}}\r\n    )\r\n\r\n    return jsonify({\r\n        \"message\": \"Section added successfully\",\r\n        \"section_id\": str(section_id)\r\n    }), 201\r\n\r\n@app.route('/upload_file', methods=['POST'])\r\ndef upload_file():\r\n    if 'file' not in request.files:\r\n        return jsonify({\"error\": \"No file provided\"}), 400\r\n\r\n    file = request.files['file']\r\n    if file.filename == '':\r\n        return jsonify({\"error\": \"No selected file\"}), 400\r\n\r\n    section_id = request.form.get('section_id')\r\n\r\n    section = sections.find_one({\"_id\": ObjectId(section_id)})\r\n    if not section:\r\n        return jsonify({\"error\": \"Section not found\"}), 404\r\n\r\n    if file and allowed_file(file.filename):\r\n        filename = secure_filename(file.filename)\r\n        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\r\n        file.save(file_path)\r\n\r\n        file_url = f\"http://127.0.0.1:5000/uploads/{filename}\"\r\n\r\n        sections.update_one(\r\n            {\"_id\": ObjectId(section_id)},\r\n            {\"$push\": {\"data\": {\"name\": filename, \"url\": file_url}}}\r\n        )\r\n\r\n        return jsonify({\r\n            \"message\": \"File uploaded successfully\",\r\n            \"file_url\": file_url\r\n        }), 200\r\n    else:\r\n        return jsonify({\"error\": \"Invalid file type\"}), 400\r\n\r\n@app.route('/enroll_student', methods=['POST'])\r\ndef enroll_student():\r\n    data = request.json\r\n    student_id = data[\"student_id\"]\r\n    course_id = data[\"course_id\"]\r\n\r\n    student = users.find_one({\"_id\": ObjectId(student_id), \"role\": \"student\"})\r\n    course = courses.find_one({\"_id\": ObjectId(course_id)})\r\n\r\n    if not student:\r\n        return jsonify({\"error\": \"Student not found\"}), 404\r\n    if not course:\r\n        return jsonify({\"error\": \"Course not found\"}), 404\r\n\r\n    if ObjectId(student_id) in course[\"students\"]:\r\n        return jsonify({\"message\": \"Student already enrolled in this course\"}), 200\r\n\r\n    courses.update_one(\r\n        {\"_id\": ObjectId(course_id)},\r\n        {\"$push\": {\"students\": ObjectId(student_id)}}\r\n    )\r\n\r\n    users.update_one(\r\n        {\"_id\": ObjectId(student_id)},\r\n        {\"$push\": {\"courses\": ObjectId(course_id)}}\r\n    )\r\n\r\n    return jsonify({\"message\": \"Student enrolled successfully\"}), 200\r\n\r\n@app.route('/student_courses/<student_id>', methods=['GET'])\r\ndef show_student_courses(student_id):\r\n    try:\r\n        student_obj_id = ObjectId(student_id)\r\n\r\n        student = users.find_one({\"_id\": student_obj_id})\r\n\r\n        if not student:\r\n            return jsonify({\"error\": \"Student not found\"}), 404\r\n\r\n        student_courses = courses.find({\"_id\": {\"$in\": student.get(\"courses\", [])}})\r\n\r\n        course_list = []\r\n        for course in student_courses:\r\n            course_list.append({\r\n                \"id\": str(course[\"_id\"]),\r\n                \"name\": course[\"name\"],\r\n                \"description\": course[\"description\"],\r\n                \"color\": course.get(\"color\", \"rgba(0, 0, 0, 0.05)\")\r\n            })\r\n\r\n        return jsonify({\"courses\": course_list}), 200\r\n    except Exception as e:\r\n        print(f\"Error in student_courses: {str(e)}\")\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route('/course/<course_id>', methods=['GET'])\r\ndef get_course(course_id):\r\n    course = courses.find_one({\"_id\": ObjectId(course_id)})\r\n\r\n    if not course:\r\n        return jsonify({\"error\": \"Course not found\"}), 404\r\n\r\n    teacher = users.find_one({\"_id\": course[\"teacher\"]})\r\n    teacher_info = {\r\n        \"id\": str(teacher[\"_id\"]),\r\n        \"name\": f\"{teacher['name']} {teacher['surname']}\"\r\n    } if teacher else None\r\n\r\n    course_sections = []\r\n    for section_id in course[\"sections\"]:\r\n        section = sections.find_one({\"_id\": section_id})\r\n        if section:\r\n            course_sections.append({\r\n                \"id\": str(section[\"_id\"]),\r\n                \"name\": section[\"name\"],\r\n                \"files\": section[\"data\"]\r\n            })\r\n\r\n    student_list = []\r\n    for student_id in course[\"students\"]:\r\n        student = users.find_one({\"_id\": student_id})\r\n        if student:\r\n            student_list.append({\r\n                \"id\": str(student[\"_id\"]),\r\n                \"name\": f\"{student['name']} {student['surname']}\",\r\n                \"email\": student[\"email\"],\r\n                \"gender\": student.get(\"sex\", \"male\")\r\n            })\r\n\r\n    course_details = {\r\n        \"id\": str(course[\"_id\"]),\r\n        \"name\": course[\"name\"],\r\n        \"description\": course[\"description\"],\r\n        \"teacher\": teacher_info,\r\n        \"sections\": course_sections,\r\n        \"students\": student_list,\r\n        \"color\": course.get(\"color\", \"rgba(0, 0, 0, 0.05)\")\r\n    }\r\n\r\n    return jsonify({\"course\": course_details}), 200\r\n\r\n@app.route('/section/<section_id>', methods=['GET'])\r\ndef get_section(section_id):\r\n    section = sections.find_one({\"_id\": ObjectId(section_id)})\r\n\r\n    if not section:\r\n        return jsonify({\"error\": \"Section not found\"}), 404\r\n\r\n    section_details = {\r\n        \"id\": str(section[\"_id\"]),\r\n        \"name\": section[\"name\"],\r\n        \"files\": section[\"data\"]\r\n    }\r\n\r\n    return jsonify({\"section\": section_details}), 200\r\n\r\n@app.route('/user/<user_id>', methods=['GET'])\r\ndef get_user(user_id):\r\n    try:\r\n        user_obj_id = ObjectId(user_id)\r\n\r\n        user = users.find_one({\"_id\": user_obj_id})\r\n\r\n        if not user:\r\n            return jsonify({\"error\": \"User not found\"}), 404\r\n\r\n        birth_date = None\r\n        if \"birth\" in user and user[\"birth\"]:\r\n            birth_date = user[\"birth\"].isoformat()\r\n\r\n        user_data = {\r\n            \"id\": str(user[\"_id\"]),\r\n            \"name\": user.get(\"name\", \"\"),\r\n            \"surname\": user.get(\"surname\", \"\"),\r\n            \"email\": user.get(\"email\", \"\"),\r\n            \"role\": user.get(\"role\", \"\"),\r\n            \"sex\": user.get(\"sex\", \"\"),\r\n            \"birth\": birth_date,\r\n            \"courses\": [str(course_id) for course_id in user.get(\"courses\", [])]\r\n        }\r\n\r\n        return jsonify({\"user\": user_data}), 200\r\n    except Exception as e:\r\n        print(f\"Error in get_user: {str(e)}\")\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route('/update_user/<user_id>', methods=['PUT'])\r\ndef update_user(user_id):\r\n    try:\r\n        data = request.json\r\n\r\n        user = users.find_one({\"_id\": ObjectId(user_id)})\r\n        if not user:\r\n            return jsonify({\"error\": \"User not found\"}), 404\r\n\r\n        update_data = {}\r\n        if \"name\" in data:\r\n            update_data[\"name\"] = data[\"name\"]\r\n        if \"surname\" in data:\r\n            update_data[\"surname\"] = data[\"surname\"]\r\n        if \"email\" in data:\r\n            update_data[\"email\"] = data[\"email\"]\r\n        if \"sex\" in data:\r\n            update_data[\"sex\"] = data[\"sex\"]\r\n        if \"birth\" in data and data[\"birth\"]:\r\n            try:\r\n                update_data[\"birth\"] = datetime.datetime.strptime(data[\"birth\"], \"%Y-%m-%d\")\r\n            except ValueError:\r\n                return jsonify({\"error\": \"Invalid date format. Use YYYY-MM-DD\"}), 400\r\n\r\n        if update_data:\r\n            users.update_one(\r\n                {\"_id\": ObjectId(user_id)},\r\n                {\"$set\": update_data}\r\n            )\r\n\r\n        return jsonify({\"message\": \"User updated successfully\"}), 200\r\n    except Exception as e:\r\n        print(f\"Error in update_user: {str(e)}\")\r\n        return jsonify({\"error\": str(e)}), 500\r\n\r\n@app.route('/courses', methods=['GET'])\r\ndef get_courses():\r\n    all_courses = courses.find({})\r\n\r\n    course_list = []\r\n    for course in all_courses:\r\n        teacher = users.find_one({\"_id\": course[\"teacher\"]})\r\n        teacher_name = f\"{teacher['name']} {teacher['surname']}\" if teacher else \"Unknown\"\r\n\r\n        course_list.append({\r\n            \"id\": str(course[\"_id\"]),\r\n            \"name\": course[\"name\"],\r\n            \"description\": course[\"description\"],\r\n            \"teacher\": {\"id\": str(course[\"teacher\"]), \"name\": teacher_name},\r\n            \"sections\": [str(section_id) for section_id in course[\"sections\"]],\r\n            \"students\": [str(student_id) for student_id in course[\"students\"]],\r\n            \"color\": course.get(\"color\", \"rgba(0, 0, 0, 0.05)\")\r\n        })\r\n\r\n    return jsonify({\"courses\": course_list}), 200\r\n\r\n@app.route('/sections', methods=['GET'])\r\ndef get_sections():\r\n    all_sections = sections.find({})\r\n\r\n    section_list = []\r\n    for section in all_sections:\r\n        section_list.append({\r\n            \"id\": str(section[\"_id\"]),\r\n            \"name\": section[\"name\"],\r\n            \"data\": section[\"data\"]\r\n        })\r\n\r\n    return jsonify({\"sections\": section_list}), 200\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project-root/backend/src/utils/app.py b/project-root/backend/src/utils/app.py
--- a/project-root/backend/src/utils/app.py	(revision 1e8fffe29a425dc60a1db4f6b2f1d57f23298985)
+++ b/project-root/backend/src/utils/app.py	(date 1743669681140)
@@ -16,7 +16,7 @@
 app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
 
 # CHANGE HERE CREDENTIALS
-client = MongoClient("mongodb://admin:admin@localhost:27017/")
+client = MongoClient("mongodb+srv://julie:Passworddb123@cluster1.28syrfz.mongodb.net/")
 db = client["Moodle-Bodio"]
 users = db["users"]
 courses = db["courses"]
